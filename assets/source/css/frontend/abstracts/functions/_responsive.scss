////
/// @group Abstracts
////

// scss-lint:disable ZeroUnit


/// Validates a breakpoint width.
///
/// @access private
///
/// @param {Number} $width           - The breakpoint width to validate.
/// @param {String} $min-max ['min'] - Set to 'max' if using the breakpoint in a `max-width` media query.
///
/// @return {Number | Bool} - The breakpoint width if valid; false if not.
@function _blr-validate-breakpoint-width( $width, $min-max: 'min' ) {

	// Return false if breakpoint is disabled.
	@if $width == 'disabled' {
		@return false;
	}

	// Throw error if breakpoint width is not a number.
	@if type-of( $width ) != 'number' {
		@error "`#{$width}` is not a valid breakpoint width (must be a number).";
	}

	// Convert breakpoint to px if unitless.
	@if unitless( $width ) {

		// Warn if breakpoint is > 0.
		@if $width > 0 {
			@warn "Breakpoint width is unitless, converting to `#{$width}px`.";
		}

		$width: 1px * $width;
	}

	// Throw error if breakpoint width has an invalid unit type.
	@if not index( ( 'px', 'em', 'rem' ), unit( $width ) ) {
		@error "`#{$width}` is not a valid breakpoint width (must be a px, em, or rem value).";
	}

	// Throw error if breakpoint width is negative.
	@if $width < 0 {
		@error "#{$width} is not a valid breakpoint width (cannot be negative).";
	}

	// Check if breakpoint width will be used in a `max-width` media query.
	@if $min-max == 'max' {

		// Throw error if breakpoint width is 0.
		@if $width == 0 {
			@error "#{$width} is not a valid breakpoint max-width (must be greater than 0).";
		}

		// Make sure we subtract the corrent unit type to get the max-width.
		@if unit( $width ) == 'px' {
			$width: $width - 1px;
		} @else if unit( $width ) == 'em' {
			$width: $width - 0.01em;
		} @else if unit( $width ) == 'rem' {
			$width: $width - 0.01rem;
		}
	}

	@return $width;
}


/// Validates a container width.
///
/// @access private
///
/// @param {Number} $width - The container width to validate.
///
/// @return {Number | Bool} - The container width if valid; false if not.
@function _blr-validate-container-width( $width ) {

	// Return false if container width is disabled.
	@if $width == 'disabled' {
		@return false;
	}

	// Throw error if container width is not a number.
	@if type-of( $width ) != 'number' {
		@error "#{$width} is not a valid container width (must be a number).";
	}

	// Warn if container width is unitless and convert to px.
	@if unitless( $width ) {
		@warn "Container width is unitless, converting to `#{$width}px`.";
		$width: 1px * $width;
	}

	// Throw error if container width is negative or zero.
	@if $width <= 0 {
		@error "#{$width} is not a valid container width (must be greater than 0).";
	}

	@return $width;
}


/// Takes either a breakpoint name or a numeric value and returns a breakpoint
/// width for use in media queries. Returns false if the breakpoint is disabled
/// or the breakpoint width is undefined or invalid.
///
/// @param {String | Number} $breakpoint      - The breakpoint name or width.
/// @param {String}          $min-max ['min'] - Set to 'max' if using the breakpoint in a `max-width` media query.
///
/// @return {Number | Bool}
@function get-breakpoint( $breakpoint, $min-max: 'min' ) {

	// Warn and return false if `$breakpoint` is not a number or a string.
	@if not index( ( 'number', 'string' ), type-of( $breakpoint ) ) {
		@warn "get-breakpoint() :: `$breakpoint` must be a string or number (#{ inspect( $breakpoint ) } was passed).";
		@return false;
	}

	// Warn and return false if a breakpoint name was passed and it isn't
	// defined in the `$breakpoints` map.
	@if type-of( $breakpoint ) == 'string' and not map-has-key( $breakpoints, $breakpoint ) {
		@warn "get-breakpoint() :: `#{$breakpoint}` is not a valid breakpoint name.";
		@return false;
	}

	// If a breakpoint width was passed directly, use it.
	// Otherwise get the width from the `$breakpoints` map.
	$width: if( type-of( $breakpoint ) == 'number', $breakpoint, map-get( $breakpoints, $breakpoint ) );

	// Validate the breakpoint width;
	$width: _blr-validate-breakpoint-width( $width, $min-max );

	// Return the breakpoint width if valid or false if not.
	@return $width;
}


/// Responsive container helper function. Takes a breakpoint and returns its
/// corresponding container width. Returns false if the breakpoint is disabled
/// or the container width is undefined or invalid.
///
/// @param {String} $breakpoint [''] - A breakpoint to get the corresponding grid container width for.
///
/// @return {Number | Bool} The container width if valid and enabled; false if not.
@function blr-container( $breakpoint ) {

	// Return false if no container width is found for the specified breakpoint.
	@if not map-has-key( $container-widths, $breakpoint ) {
		@warn "blr-responsive-container() :: No container width is defined for breakpoint `#{$breakpoint}`.";
		@return false;
	}

	// Get the container width.
	$width: map-get( $container-widths, $breakpoint );

	// Validate the container width.
	$width: _blr-validate-container-width( $width );

	// Return the container width if valid or false if not.
	@return $width;
}


/// Converts pixel value into matching rem value.
///
/// @source https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
///
/// @param {Number} $value - Value to convert.
/// @param {Number} $base [16px] - The base value to use for `1rem`.
///
/// @return {Number} The converted value.
@function rem-calc( $value, $base: 16px ) {

	// Check if the value is a number
	@if type-of( $value ) != 'number' {
		@warn inspect( $value ) + ' was passed to rem-calc() as the first argument, which is not a number.';
		@return $value;
	}

	// Check if the base `rem` value is a number
	@if type-of( $base ) != 'number' {
		@warn inspect( $base ) + ' was passed to rem-calc() as the second argument, which is not a number.';
		@return $value;
	}

	// If the base font size is a %, then multiply it by 16px
	// This is because 100% font size = 16px in most all browsers
	@if unit( $base ) == '%' {
		$base: ( $base / 100% ) * 16px;
	}

	// Calculate rem value.
	$value: strip-unit( $value ) / strip-unit( $base ) * 1rem;

	// Turn 0rem into 0
	@if $value == 0rem {
		$value: 0;
	}

	@return $value;
}
