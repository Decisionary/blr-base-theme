////
/// @group Abstracts
////

// scss-lint:disable ZeroUnit



/// Takes either a breakpoint name or a numeric value and returns a breakpoint
/// width for use in media queries. Returns false if breakpoint name is not
/// defined in the `$breakpoints` map or if its value is set to `disabled`.
///
/// @param {String|Number} $breakpoint - The breakpoint name or width.
/// @param {String} $min-max ['min'] - Set to 'max' for a `max-width` media query.
///
/// @return {Number|Boolean}
@function get-breakpoint( $breakpoint, $min-max: 'min' ) {

	// Return breakpoint if it's already a number value.
	@if type-of( $breakpoint ) == 'number' {
		@return $breakpoint;
	}

	// Return false if breakpoint isn't defined in the `$breakpoints` map.
	@if not map-has-key( $breakpoints, $breakpoint ) {
		@warn "`#{$breakpoint}` is not a valid breakpoint name.";
		@return false;
	}

	// Get the breakpoint width.
	$width: map-get( $breakpoints, $breakpoint );

	// Return false if the breakpoint is disabled.
	@if $width == 'disabled' {
		@return false;
	}

	// If breakpoint width is negative, flip it to a positive value.
	$width: abs( $width );

	// Make sure `min-width` and `max-width` media queries don't overlap.
	@if 'max' == $min-max {
		$width: $width - 0.000001rem;
	}

	// Return the breakpoint width.
	@return $width;
}

/// Converts pixel value into matching rem value.
///
/// @source https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
///
/// @param {Number} $value - Value to convert.
/// @param {Number} $base [16px] - The base value to use for `1rem`.
///
/// @return {Number} The converted value.
@function rem-calc( $value, $base: 16px ) {

	// Check if the value is a number
	@if type-of( $value ) != 'number' {
		@warn inspect( $value ) + ' was passed to rem-calc() as the first argument, which is not a number.';
		@return $value;
	}

	// Check if the base `rem` value is a number
	@if type-of( $base ) != 'number' {
		@warn inspect( $base ) + ' was passed to rem-calc() as the second argument, which is not a number.';
		@return $value;
	}

	// If the base font size is a %, then multiply it by 16px
	// This is because 100% font size = 16px in most all browsers
	@if unit( $base ) == '%' {
		$base: ( $base / 100% ) * 16px;
	}

	// Calculate rem value.
	$value: strip-unit( $value ) / strip-unit( $base ) * 1rem;

	// Turn 0rem into 0
	@if $value == 0rem {
		$value: 0;
	}

	@return $value;
}
