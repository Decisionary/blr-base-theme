/// Button variant mixin.
///
/// @param {String} $variant - The button variant.
@mixin button-variant( $variant, $extend: true ) {

	@if not map-has-key( $button-variants, $variant ) {

		@warn "`#{$variant}` is not a valid button variant.";

	} @else {

		$theme: map-get( $button-variants, $variant );

		@if 'default' != $variant {
			$theme: map-extend( map-get( $button-variants, 'default' ), $theme );
		}

		@include button-colors( $theme );

		@include blr-mixin-dryer( 'button', $extend ) {
			@include style-link {
				display: inline-block;
				border-width: $border-width-button-default;
				border-style: solid;
				background-color: $background-color-button-default;
				cursor: pointer;
				user-select: none;
				padding: rem-calc( 5px ) rem-calc( 20px );
				vertical-align: middle;
				text-align: center;
				text-decoration: none;
				line-height: 1;
				word-spacing: normal;
				white-space: nowrap;
				color: $color-base;
				font-family: $font-family-button;
				font-size: $font-size-large;
			}
		}
	}
}

/// @alias button-colors
@mixin button-color( $theme ) {
	@include button-colors( $theme );
}

/// Creates a basic colored button.
///
/// @param {Map} $theme - The button colors you want to use.
@mixin button-colors( $theme ) {

	@include visited( true ) {
		border-color: map-get( $theme, 'border-color' );
		background-color: map-get( $theme, 'background-color' );
		color: map-get( $theme, 'color' );

		@include hover {
			border-color: map-get( $theme, 'border-color-hover' );
			background-color: map-get( $theme, 'background-color-hover' );
			color: map-get( $theme, 'color-hover' );
		}

		@include focus {
			border-color: map-get( $theme, 'border-color-focus' );
			background-color: map-get( $theme, 'background-color-focus' );
			color: map-get( $theme, 'color-focus' );
		}

		@include active {
			border-color: map-get( $theme, 'border-color-active' );
			background-color: map-get( $theme, 'background-color-active' );
			color: map-get( $theme, 'color-active' );
		}
	}
}
