////
/// @group Abstracts
////

// scss-lint:disable ZeroUnit



/// Converts a pixel value to matching rem value. *Any* value passed, regardless
/// of unit, is assumed to be a pixel value. By default, the base pixel value
/// used to calculate the rem value is 16px.
///
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @return {Number} A number in rems, calculated based on the given value and
///                  the base pixel value (rem values are passed through as is).
@function _to-rem( $value, $base: null ) {

	// Check if the value is a number
	@if type-of( $value ) != 'number' {
		@warn inspect( $value ) + ' was passed to rem-calc(), which is not a number.';
		@return $value;
	}

	// Calculate rem if units for $value is not rem
	@if unit( $value ) != 'rem' {
		$value: strip-unit( $value ) / strip-unit( $base ) * 1rem;
	}

	// Turn 0rem into 0
	@if $value == 0rem {
		$value: 0;
	}

	@return $value;
}


/// Determine if a value is not falsey, in CSS terms. Falsey values are `null`, `none`, `0` with any unit, or an empty list.
///
/// @param {Mixed} $val - Value to check.
///
/// @return {Boolean} `true` if `$val` is not falsey.
@function has-value( $val ) {

	@if $val == null or $val == none {
		@return false;
	}

	@if type-of( $val ) == 'number' and strip-unit( $val ) == 0 {
		@return false;
	}

	@if type-of( $val ) == 'list' and length( $val ) == 0 {
		@return false;
	}

	@return true;
}

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @source https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
///
/// @param {Number} $num - Number to strip unit from.
///
/// @return {Number} The same number, sans unit.
@function strip-unit( $num ) {
	@return $num / ( $num * 0 + 1 );
}


/// Converts pixel value into matching rem value.
///
/// @source https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss
///
/// @param {Number|List} $values - One or more values to convert.
/// @param {Number} $base [16px] - The base value to use for `1rem`.
///
/// @return {Number} The converted value.
@function rem-calc( $values, $base: 16px ) {

	$rem-values: ();
	$count: length( $values );

	// Check if the value is a number
	@if type-of( $values ) != 'number' and type-of( $values ) != 'list' {
		@warn inspect( $values ) + ' was passed to rem-calc() as the first argument, which is neither a number nor a list.';
		@return $values;
	}

	// Check if the base `rem` value is a number
	@if type-of( $base ) != 'number' {
		@warn inspect( $base ) + ' was passed to rem-calc() as the second argument, which is not a number.';
		@return $values;
	}

	// If the base font size is a %, then multiply it by 16px
	// This is because 100% font size = 16px in most all browsers
	@if unit( $base ) == '%' {
		$base: ( $base / 100% ) * 16px;
	}

	// If a single value was passed, convert and return it.
	@if $count == 1 {
		@return _to-rem( $values, $base );
	}

	// If a list of values was passed, convert each value and then add the new
	// value to a temporary list.
	@for $i from 1 through $count {
		$rem-values: append( $rem-values, _to-rem( nth( $values, $i ), $base ) );
	}

	// Return the list of converted values.
	@return $rem-values;
}
