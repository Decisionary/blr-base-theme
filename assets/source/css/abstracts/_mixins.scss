////
/// Mixins
///
/// @group Abstracts
////


///
/// Media query helper mixin.
///
/// @param
///
@mixin breakpoint( $breakpoint, $min-max: 'min' ) {

	$type:  if( 'max' == $min-max, 'max-width', 'min-width' );
	$width: get-breakpoint( $breakpoint, $min-max );

	@if $width {
		@media( $type: $width ) {
			@content;
		}
	}
}

@mixin icon( $icon-content: null ) {
	@include fa-icon;

	text-align: center;

	@if $icon-content {
		&::before {
			content: $icon-content;
		}
	}
}

@mixin button-style( $style ) {
	@if map-has-key( $button-variants, $variant ) {
		@include button-color( map-get( $button-variants, $variant ) );
	} @else {
		@warn "`#{$variant}` is not a valid button variant.";
	}
}

@mixin button-color( $color ) {
	border-color: $color;
	color: $color;

	&:active,
	&:focus,
	&:hover {
		background-color: $color;
		color: ensure-contrast( $color );
	}
}

@mixin nav-variant( $variant: null ) {

	@include susy-clearfix;

	@if not $variant or not map-has-key( $nav-variants, $variant ) {
		@warn "`#{$variant} is not a valid nav menu variant.`"
	} @else {
		$theme: map-get( $nav-variants, $variant );

		border-color: map-get( $theme, 'color' );
		background-color: map-get( $theme, 'color-bg' );
		color: map-get( $theme, 'color' );
		font-size: map-get( $theme, 'font-size' );

		.menu__item {
			border-color: map-get( $theme, 'color' );

			&:hover,
			&:focus {
				background-color: map-get( $theme, 'color-bg-hover' );
				color: map-get( $theme, 'color-hover' );
			}

			&.is-active {
				background-color: map-get( $theme, 'color-bg-active' );
				color: map-get( $theme, 'color-active' );
			}
		}
	}
}

@mixin alpha-attribute( $attribute, $color, $background: #fff ) {

	$percent: alpha( $color ) * 100%;

	@if ( $percent < 100% ) {
		#{$attribute}: mix( opacify( $color, 1 ), $background, $percent );
	}

	#{$attribute}: $color;
}
